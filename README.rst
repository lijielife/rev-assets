===========================
AssetsRev
===========================

.. image:: https://travis-ci.org/jpscaletti/assets-rev.svg?branch=master
   :target: https://travis-ci.org/jpscaletti/assets-rev
   :alt: Build Status

You care about the performance of your site, so you've configured the web server to cache all your assets for a long time. The most used way to bypass that cache when deploying a new version, is to add a hash of the assets to their names.
::
	'home.js' --> 'home.1a23b.js'
	'home.css' --> 'home.aef45.css'

The problem is, now your Python web app can't find the file unless you manually –and painstakingly— update all the URLs in the templates.

.. code:: jinja2

	<script src="{{ url_for('static', filename='home.js') }}></script>
	<link rel="stylesheet" href="{{ url_for('static', filename='home.css') }}</script>

Whit this library, there is no need for that. Just change your templates to:

.. code:: jinja2

	<script src="{{ 'home.js' | asset_url }}></script>
	<link rel="stylesheet" href="{{ 'home.css' | asset_url }}</script>

and use this code:

.. code:: python

	# app.py
	from flask import Flask, render_template
	from assets_rev import AssetsRev

	app = flask.Flask(__name__)

	rev = AssetsRev()
	app.context_processor(rev.get_jinja_context())

	@app.route('/')
	def index():
	    return render_template('index.html')

and it will work for every version of the assets that you build.

This works by reading a ``manifest.json`` generated by the revision tool (so don't forget to configure your task runner to make one).

You can continue to use the old method to link un-versioned assets, like ``favicon.ico`` and others like it.

Note that *this is not a Flask extension*, but a Python library. You can use it with any other framework.


Run the tests
======================

We use some external dependencies, listed in ``requirements_tests.txt``::

    $  pip install -r requirements-tests.txt
    $  python setup.py develop

To run the tests in your current Python version do::

    $  make test

To run them in every supported Python version do::

    $  tox

It's also neccesary to run the coverage report to make sure all lines of code
are touch by the tests::

    $  make coverage

Our test suite `runs continuously on Travis CI <https://travis-ci.org/jpscaletti/assets-rev>`_ with every update.


Contributing
======================

#. Check for `open issues <https://github.com/jpscaletti/assets-rev/issues>`_ or open
   a fresh issue to start a discussion around a feature idea or a bug.
#. Fork the `AssetsRev repository on Github <https://github.com/jpscaletti/assets-rev>`_
   to start making your changes.
#. Write a test which shows that the bug was fixed or that the feature works
   as expected.
#. Send a pull request and bug the maintainer until it gets merged and published.
   :) Make sure to add yourself to ``AUTHORS``.

______

:copyright: `Juan-Pablo Scaletti <http://jpscaletti.com/>`_.
:license: BSD-3, see LICENSE for more details.
